package main

import (
	"database/sql"
	"fmt"
	"log"
	"math/rand"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/bwmarrin/discordgo"
	_ "github.com/lib/pq"
	"QCheckWE"
	"github.com/joho/godotenv"
)

type Bot struct {
	db     *sql.DB
	client *discordgo.Session
}

const schema = `
CREATE TABLE IF NOT EXISTS users (
    user_id TEXT PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    last_daily TIMESTAMP,
    inventory JSONB DEFAULT '[]'
);

CREATE TABLE IF NOT EXISTS roles (
    guild_id TEXT,
    user_id TEXT,
    role_name TEXT,
    price INTEGER,
    PRIMARY KEY (guild_id, user_id, role_name)
);`

func NewBot(token string, dbURL string) (*Bot, error) {
	client, err := discordgo.New("Bot " + token)
	if err != nil {
		return nil, fmt.Errorf("error creating Discord session: %v", err)
	}

	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		return nil, fmt.Errorf("error connecting to database: %v", err)
	}

	if _, err := db.Exec(schema); err != nil {
		return nil, fmt.Errorf("error creating tables: %v", err)
	}

	return &Bot{
		db:     db,
		client: client,
	}, nil
}

func (b *Bot) handleCommands(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == s.State.User.ID {
		return
	}

	if strings.HasPrefix(m.Content, ".") {
		args := strings.Fields(m.Content)
		command := strings.ToLower(args[0][1:])

		switch command {
		case "balance":
			b.handleBalance(s, m)
		case "daily":
			b.handleDaily(s, m)
		case "flip":
			if len(args) < 2 {
				s.ChannelMessageSend(m.ChannelID, "Usage: .flip <amount>")
				return
			}
			b.handleCoinFlip(s, m, args[1])
		case "transfer":
			if len(args) < 3 {
				s.ChannelMessageSend(m.ChannelID, "Usage: .transfer <@user> <amount>")
				return
			}
			b.handleTransfer(s, m, args[1], args[2])
		case "sr":
			if len(args) < 3 {
				s.ChannelMessageSend(m.ChannelID, "Usage: .sr <@user> <role-name>")
				return
			}
			targetUser := strings.Trim(args[1], "<@!>")
			roleName := strings.Join(args[2:], "-")
			b.handleSetRole(s, m, targetUser, roleName)
		case "buyrole":
			if len(args) < 2 {
				s.ChannelMessageSend(m.ChannelID, "Usage: .buyrole <role-name>")
				return
			}
			roleName := strings.Join(args[1:], "-")
			b.handleBuyRole(s, m, roleName)
		case "createrole":
			if len(args) < 3 {
				s.ChannelMessageSend(m.ChannelID, "Usage: .createrole <role-name> <price>")
				return
			}
			roleName := strings.Join(args[1:len(args)-1], "-")
			price, err := strconv.Atoi(args[len(args)-1])
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "Invalid price. Usage: .createrole <role-name> <price>")
				return
			}
			b.handleCreateRole(s, m, roleName, price)
		}
	}
}

func (b *Bot) handleBalance(s *discordgo.Session, m *discordgo.MessageCreate) {
	var balance int
	err := b.db.QueryRow("SELECT balance FROM users WHERE user_id = $1", m.Author.ID).Scan(&balance)
	if err != nil {
		if err == sql.ErrNoRows {
			balance = 0
			_, err = b.db.Exec("INSERT INTO users (user_id, balance) VALUES ($1, $2)", m.Author.ID, balance)
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "Error initializing balance.")
				return
			}
		} else {
			s.ChannelMessageSend(m.ChannelID, "Error retrieving balance.")
			return
		}
	}
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, your balance is %d coins.", m.Author.ID, balance))
}

func (b *Bot) handleDaily(s *discordgo.Session, m *discordgo.MessageCreate) {
	var lastDaily time.Time
	err := b.db.QueryRow("SELECT last_daily FROM users WHERE user_id = $1", m.Author.ID).Scan(&lastDaily)
	if err != nil && err != sql.ErrNoRows {
		s.ChannelMessageSend(m.ChannelID, "Error checking daily reward.")
		return
	}

	now := time.Now()
	if lastDaily.IsZero() || now.Sub(lastDaily) >= 24*time.Hour {
		_, err = b.db.Exec(`
			INSERT INTO users (user_id, balance, last_daily)
			VALUES ($1, $2, $3)
			ON CONFLICT (user_id)
			DO UPDATE SET balance = users.balance + $2, last_daily = $3
		`, m.Author.ID, 100, now)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "Error claiming daily reward.")
			return
		}
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you claimed your daily reward of 100 coins!", m.Author.ID))
	} else {
		nextDaily := lastDaily.Add(24 * time.Hour)
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you can claim your next daily reward in %s.", m.Author.ID, time.Until(nextDaily).Round(time.Second)))
	}
}

func (b *Bot) handleCoinFlip(s *discordgo.Session, m *discordgo.MessageCreate, amountStr string) {
	amount, err := strconv.Atoi(amountStr)
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "Invalid amount. Usage: .flip <amount>")
		return
	}

	var balance int
	err = b.db.QueryRow("SELECT balance FROM users WHERE user_id = $1", m.Author.ID).Scan(&balance)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error retrieving balance.")
		return
	}

	if balance < amount {
		s.ChannelMessageSend(m.ChannelID, "You don't have enough coins to flip.")
		return
	}

	if rand.Intn(2) == 0 {
		_, err = b.db.Exec("UPDATE users SET balance = balance + $1 WHERE user_id = $2", amount, m.Author.ID)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "Error updating balance.")
			return
		}
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you won %d coins! Your new balance is %d.", m.Author.ID, amount, balance+amount))
	} else {
		_, err = b.db.Exec("UPDATE users SET balance = balance - $1 WHERE user_id = $2", amount, m.Author.ID)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "Error updating balance.")
			return
		}
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you lost %d coins. Your new balance is %d.", m.Author.ID, amount, balance-amount))
	}
}

func (b *Bot) handleTransfer(s *discordgo.Session, m *discordgo.MessageCreate, targetUserStr string, amountStr string) {
	targetUser := strings.Trim(targetUserStr, "<@!>")
	amount, err := strconv.Atoi(amountStr)
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "Invalid amount. Usage: .transfer <@user> <amount>")
		return
	}

	var senderBalance int
	err = b.db.QueryRow("SELECT balance FROM users WHERE user_id = $1", m.Author.ID).Scan(&senderBalance)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error retrieving your balance.")
		return
	}

	if senderBalance < amount {
		s.ChannelMessageSend(m.ChannelID, "You don't have enough coins to transfer.")
		return
	}

	_, err = b.db.Exec("UPDATE users SET balance = balance - $1 WHERE user_id = $2", amount, m.Author.ID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error deducting coins.")
		return
	}

	_, err = b.db.Exec(`
		INSERT INTO users (user_id, balance)
		VALUES ($1, $2)
		ON CONFLICT (user_id)
		DO UPDATE SET balance = users.balance + $2
	`, targetUser, amount)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error transferring coins.")
		return
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you transferred %d coins to <@%s>.", m.Author.ID, amount, targetUser))
}

func (b *Bot) handleSetRole(s *discordgo.Session, m *discordgo.MessageCreate, targetUser string, roleName string) {
	member, err := s.GuildMember(m.GuildID, m.Author.ID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error checking permissions.")
		return
	}

	hasPermission := false
	for _, roleID := range member.Roles {
		role, err := s.State.Role(m.GuildID, roleID)
		if err != nil {
			continue
		}
		if role.Permissions&discordgo.PermissionAdministrator != 0 {
			hasPermission = true
			break
		}
	}

	if !hasPermission {
		s.ChannelMessageSend(m.ChannelID, "You need administrator permissions to assign roles!")
		return
	}

	var roleID string
	roles, err := s.GuildRoles(m.GuildID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error fetching guild roles.")
		return
	}

	roleExists := false
	for _, role := range roles {
		if strings.ToLower(role.Name) == strings.ToLower(roleName) {
			roleID = role.ID
			roleExists = true
			break
		}
	}

	if !roleExists {
		roleParams := &discordgo.RoleParams{
			Name: roleName,
		}
		newRole, err := s.GuildRoleCreate(m.GuildID, roleParams)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "Error creating new role.")
			return
		}
		roleID = newRole.ID
	}

	err = s.GuildMemberRoleAdd(m.GuildID, targetUser, roleID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error assigning role to user.")
		return
	}

	_, err = b.db.Exec(`
        INSERT INTO roles (guild_id, user_id, role_name)
        VALUES ($1, $2, $3)
        ON CONFLICT (guild_id, user_id, role_name)
        DO NOTHING
    `, m.GuildID, targetUser, strings.ToLower(roleName))

	if err != nil {
		log.Printf("Error storing role assignment: %v", err)
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("Successfully assigned role '%s' to <@%s>", roleName, targetUser))
}

func (b *Bot) handleBuyRole(s *discordgo.Session, m *discordgo.MessageCreate, roleName string) {
	var price int
	err := b.db.QueryRow("SELECT price FROM roles WHERE role_name = $1 AND guild_id = $2", strings.ToLower(roleName), m.GuildID).Scan(&price)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Role not found or not for sale.")
		return
	}

	var balance int
	err = b.db.QueryRow("SELECT balance FROM users WHERE user_id = $1", m.Author.ID).Scan(&balance)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error retrieving balance.")
		return
	}

	if balance < price {
		s.ChannelMessageSend(m.ChannelID, "You don't have enough coins to buy this role.")
		return
	}

	_, err = b.db.Exec("UPDATE users SET balance = balance - $1 WHERE user_id = $2", price, m.Author.ID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error deducting coins.")
		return
	}

	roles, err := s.GuildRoles(m.GuildID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error fetching guild roles.")
		return
	}

	var roleID string
	for _, role := range roles {
		if strings.ToLower(role.Name) == strings.ToLower(roleName) {
			roleID = role.ID
			break
		}
	}

	if roleID == "" {
		s.ChannelMessageSend(m.ChannelID, "Role not found.")
		return
	}

	err = s.GuildMemberRoleAdd(m.GuildID, m.Author.ID, roleID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error assigning role.")
		return
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, you successfully purchased the role '%s' for %d coins.", m.Author.ID, roleName, price))
}

func (b *Bot) handleCreateRole(s *discordgo.Session, m *discordgo.MessageCreate, roleName string, price int) {
	member, err := s.GuildMember(m.GuildID, m.Author.ID)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error checking permissions.")
		return
	}

	hasPermission := false
	for _, roleID := range member.Roles {
		role, err := s.State.Role(m.GuildID, roleID)
		if err != nil {
			continue
		}
		if role.Permissions&discordgo.PermissionAdministrator != 0 {
			hasPermission = true
			break
		}
	}

	if !hasPermission {
		s.ChannelMessageSend(m.ChannelID, "You need administrator permissions to create roles!")
		return
	}

	_, err = b.db.Exec(`
        INSERT INTO roles (guild_id, role_name, price)
        VALUES ($1, $2, $3)
        ON CONFLICT (guild_id, role_name)
        DO UPDATE SET price = $3
    `, m.GuildID, strings.ToLower(roleName), price)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "Error creating role.")
		return
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("Role '%s' created with price %d coins.", roleName, price))
}

func (b *Bot) handleQuotaCheck(s *discordgo.Session, i *discordgo.InteractionCreate) {
	landlineNumber := i.ApplicationCommandData().Options[0].StringValue()
	password := i.ApplicationCommandData().Options[1].StringValue()

	checker, err := QCheckWE.NewWeQuotaChecker(landlineNumber, password)
	if err != nil {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Content: fmt.Sprintf("Error: %v", err),
			},
		})
		return
	}

	quotaInfo, err := checker.CheckQuota()
	if err != nil {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Content: fmt.Sprintf("Error: %v", err),
			},
		})
		return
	}

	response := fmt.Sprintf(`
		Customer: %s
		Plan: %s
		Remaining: %.2f / %.2f (%s%% Used)
		Renewed On: %s
		Expires On: %s (%s)
	`,
		quotaInfo["name"],
		quotaInfo["offerName"],
		quotaInfo["remaining"],
		quotaInfo["total"],
		quotaInfo["usagePercentage"],
		quotaInfo["renewalDate"],
		quotaInfo["expiryDate"],
		quotaInfo["expiryIn"],
	)

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: response,
		},
	})
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	
	token := os.Getenv("DISCORD_TOKEN")
	dbURL := os.Getenv("DATABASE_URL")

	bot, err := NewBot(token, dbURL)
	if err != nil {
		log.Fatalf("Error initializing bot: %v", err)
	}

	bot.client.AddHandler(bot.handleCommands)
	bot.client.AddHandler(func(s *discordgo.Session, i *discordgo.InteractionCreate) {
		if i.ApplicationCommandData().Name == "quota" {
			bot.handleQuotaCheck(s, i)
		}
	})

	err = bot.client.Open()
	if err != nil {
		log.Fatalf("Error opening connection: %v", err)
	}
	defer bot.client.Close()

	_, err = bot.client.ApplicationCommandCreate(bot.client.State.User.ID, "", &discordgo.ApplicationCommand{
		Name:        "quota",
		Description: "Check your internet quota",
		Options: []*discordgo.ApplicationCommandOption{
			{
				Type:        discordgo.ApplicationCommandOptionString,
				Name:        "landline",
				Description: "Your landline number",
				Required:    true,
			},
			{
				Type:        discordgo.ApplicationCommandOptionString,
				Name:        "password",
				Description: "Your password",
				Required:    true,
			},
		},
	})
	if err != nil {
		log.Fatalf("Error creating slash command: %v", err)
	}

	fmt.Println("Bot is running. Press CTRL+C to exit.")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)
	<-sc
}